name: Build And Push Release Docker Image (Prod Env)
on:
  # release:
  #   types:
  #     - published
  push:
    tags:
      - '**'
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true
permissions: write-all
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3

      - name: Set image tag
        id: version
        run: |
          # parse tag
          ref=$GITHUB_REF
          tag=${ref##*/}
          IFS='@' read -ra parts <<< "$tag"
          # map file path
          declare -A file_map
          file_map["developer"]="./packages/developer"
          file_map["provider"]="./packages/provider"
          file_map["resolce"]="./packages/resolce"
          file_map["base"]="./components/base"
          # 
          echo "P_NAME=${parts[0]}" >> $GITHUB_ENV
          echo "P_VER=v${parts[1]}" >> $GITHUB_ENV
          echo "P_PATH=${file_map[parts[0]]}" >> $GITHUB_ENV

      - uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Build ${{ env.P_NAME }}  Image
        env:
          IMAGE_TAG: ${{ env.P_VER }}
        run: |
          envs=${{env}}
          variables=("P_VER" "P_NAME" "P_PATH")
          for var in "${variables[@]}"; do
            if [[ -z "${envs[$var]}" ]]; then
              echo "环境变量 $var 不存在"
              exit 1
            else
              echo "环境变量 $var 存在"
            fi
          done
      # docker build -f ./apps/console/Dockerfile -t api7/api7-ee-3-console:dev .

      # - name: Login to Registry
      #   uses: docker/login-action@v1
      #   with:
      #     registry: ${{ secrets.PRIVATE_DOCKER_REGISTRY } }
      #     username: ${{ secrets.PRIVATE_DOCKER_USERNAME } }
      #     password: ${{ secrets.PRIVATE_DOCKER_PASSWORD } }
      # - name: Push Images
      #   env:
      #     REGISTRY: ${{ secrets.PRIVATE_DOCKER_REGISTRY } }
      #     IMAGE_TAG: ${{ steps.version.outputs.FRONTEND_VERSION } }
      #   run: |
      #     docker tag api7/api7-ee-3-console:dev $REGISTRY/api7/api7-ee-3-console:$IMAGE_TAG
      #     docker push $REGISTRY/api7/api7-ee-3-console:$IMAGE_TAG
